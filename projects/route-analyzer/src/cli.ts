#!/usr/bin/env node
/* eslint-disable header/header */

/*!
 * Copyright 2020 VMware, Inc.
 * SPDX-License-Identifier: BSD-2-Clause
 */
import fs from 'fs';
import ts from 'typescript';
import yargs from 'yargs';
import * as routeAnalyzer from './lib/route-analyzer';
import { generateRouteBuilder } from './lib/gen-route-builder';
import { generateRouteSegments } from './lib/gen-route-segments';
import { join, normalize } from '@angular-devkit/core';

const argv = yargs
    .option('entryFile', {
        alias: 'e',
        description: 'Entry file of your angular application',
        type: 'string',
    })
    .option('outputDirectory', {
        alias: 'o',
        description: 'Directory to output both generated files. Will be created as needed',
        type: 'string',
    })
    .option('jsonFile', {
        alias: 'j',
        description: 'JSON routes file to be generated by this script',
        type: 'string',
        default: 'app-routes.json',
    })
    .option('tsFile', {
        alias: 't',
        description:
            'Name of TypeScript file containing route functions and the HTML tagName for the routed component.',
        type: 'string',
        default: 'app-routes.ts',
    })
    .option('segmentsFile', {
        alias: 's',
        description: 'Name of TypeScript file containing all route segments as separate constants.',
        type: 'string',
        default: 'app-segments.ts',
    })
    .help()
    .demandOption(['entryFile', 'outputDirectory'])
    .alias('help', 'h')
    .parseSync();

const UTF8 = 'utf8' as const;

const appRoutes = routeAnalyzer.getRoutesByEntryPoint([argv.entryFile], {
    target: ts.ScriptTarget.ES5,
    module: ts.ModuleKind.CommonJS,
});

const options = { mode: 0o755, encoding: UTF8 };
const outputJsonFile = join(normalize(argv.outputDirectory), argv.jsonFile);
const outputTs = join(normalize(argv.outputDirectory), argv.tsFile);
const outputTsSegments = join(normalize(argv.outputDirectory), argv.segmentsFile);

fs.mkdirSync(argv.outputDirectory, { recursive: true });
fs.writeFileSync(outputJsonFile, JSON.stringify(appRoutes, undefined, 2), options);
fs.writeFileSync(outputTs, generateRouteBuilder(appRoutes), options);
fs.writeFileSync(outputTsSegments, generateRouteSegments(appRoutes), options);
